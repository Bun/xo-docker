#!/bin/sh

# TODO:
#
# * interfaces
# * routes
# * scripts
# * users/sudo

if [ -n "$XO_AGENT_TEST" ]; then
    XO_USER_DATA=/tmp/ec2-user-data
    XO_BOOTSCRIPT=/tmp/xo-bootscript
    XO_ROOT_SSH=/tmp/root-ssh
    xo_log() { echo `date +"%Y-%m-%d %H:%M:%S"`" | $@"; }
    xo_import_user_data() {
        test -s "test/user-data" && \
        cp "test/user-data" "${XO_USER_DATA}"
    }
else
    XO_USER_DATA=/run/ec2-user-data
    XO_BOOTSCRIPT=/run/xo-bootscript
    XO_ROOT_SSH=/root/.ssh
    xo_log() { logger -t xo-agent -p user.notice -- "$@"; }
    xo_import_user_data() {
        # TODO: logging
        wget -q "http://169.254.169.254/latest/user-data/" \
            -O "${XO_USER_DATA}-fetch" \
        && test -s "${XO_USER_DATA}-fetch" \
        && mv "${XO_USER_DATA}-fetch" "${XO_USER_DATA}"
    }
fi


quote() { printf %s\\n "$1" | sed "s/'/'\\\\''/g"; }
simple() { printf %s\\n "$1" | sed -r "s/[^a-zA-Z0-9_-]+/_/g"; }

# TODO: remove
xo_parse_config() {
    local sect=""
    local key=""
    while read -r line; do
        case "$line" in
            "["*"]")
                line=${line#[}
                sect=${line%]}
                ;;
            *=*)
                key=$(echo "$line" | cut -d = -f 1)
                eval "cfg_"$(simple "${sect}_${key}")"='"$(quote "${line#$key=}")"'"
        esac
    done < "${XO_USER_DATA}"
}

xo_sync_hostname() {
    if [ -z "${cfg_global_host_name}" ]; then
        return
    fi

    if [ "$(hostname)" != "$cfg_global_host_name" ]; then
        xo_log "Setting hostname to ${cfg_global_host_name}"
        hostname "$cfg_global_host_name"
        echo "$cfg_global_host_name" > /etc/hostname
    fi
}

xo_sync_ifaces() {
    xo_log "Setting up interfaces"
    local mac
    local state
    local ip
    local ifaces=$(awk 'BEGIN { i = 0 } {
        if ($1 == "[interfaces]") { i = 1; }
        else if (substr($1, 0, 1) == "[") { i = 0; }
        else if (i == 1) { print $0; }}' "$XO_USER_DATA")

    for iface in $ifaces; do
        for dev in $(ls -1 /sys/class/net/); do
            mac=${iface%%=*}
            # XXX: not tested with IPv6
            ip=$(echo "$iface" | cut -d : -f 3-)
            state=$(echo "${iface#*=}" | cut -d : -f 1)

            if [ $mac == $(tr -d : < "/sys/class/net/$dev/address") ]; then
                xo_log "Setting $dev to $state ($ip)"
                if [ "$XO_CONFIG_FIRST" == 1 ]; then
                    xo_log $(ip link set dev "$dev" "$state" 2>&1)
                fi
                xo_log $(ip address add "$ip" dev "$dev" 2>&1)
            fi
        done
    done
}

xo_bootscripts() {
    xo_log "Running bootscripts"
    awk 'BEGIN { i = 0 } {
        if (i==0 && $1 == "[scripts]") { i = 1; }
        else if (substr($1, 0, 1) == "[" ) { i = 0; }
        else if (i == 1 && substr($1, 1, 11) == "bootscript=") {
            i = 2; print substr($0, 12) }
        else if (i == 2 && substr($0, 1, 1) == "\t") {
            print substr($0, 2) } }' "$XO_USER_DATA" > "$XO_BOOTSCRIPT"

    xo_log $(ash "$XO_BOOTSCRIPT" 2>&1)
    rm "$XO_BOOTSCRIPT"
}

xo_sync() {
    while :; do
        xo_import_user_data && break
        sleep 5s
    done

    local h=$(sha256sum "${XO_USER_DATA}")

    if [ "$h" != "$XO_CONFIG_HASH" ]; then
        xo_log "Applying new configuration"
        xo_parse_config

        xo_sync_hostname
        xo_sync_ifaces

        if [ "$XO_CONFIG_FIRST" == 1 ]; then
            xo_bootscripts
        fi

        XO_CONFIG_HASH=$h
        XO_CONFIG_FIRST=0
    fi
}

XO_CONFIG_FIRST=1
XO_CONFIG_HASH=

while :; do
    xo_sync
    sleep 10s
done
